<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans     
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx.xsd
	http://www.springframework.org/schema/jee       
	http://www.springframework.org/schema/jee/spring-jee.xsd
	">
    
	<!-- jndi数据源 -->  
	<!--  
	<jee:jndi-lookup id="jndiDataSource" jndi-name="java:comp/env/jdbc/datasource" /> 
	--> 
	<!-- 定义使用C3P0连接池的数据源 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<!-- 指定连接数据库的JDBC驱动 -->
		<property name="driverClass">
			<value>${jdbc.driverClassName}</value>
		</property>
		<!-- 连接数据库所用的URL -->
		<property name="jdbcUrl">
			<value>${jdbc.url}</value>
		</property>
		<!-- 连接数据库的用户名 -->
		<property name="user">
			<value>${jdbc.user}</value>
		</property>
		<!-- 连接数据库的密码 -->
		<property name="password">
			<value>${jdbc.password}</value>
		</property>
		<!-- 设置数据库连接池的最大连接数 -->
		<property name="maxPoolSize">
			<value>20</value>
		</property>
		<!-- 设置数据库连接池的最小连接数 -->
		<property name="minPoolSize">
			<value>2</value>
		</property>
		<!-- 设置数据库连接池的初始化连接数 -->
		<property name="initialPoolSize">
			<value>2</value>
		</property>
		<!-- 设置数据库连接池的连接的最大空闲时间,单位为秒 -->
		<property name="maxIdleTime">   
        	<value>25000</value>   
        </property>   
        <property name="acquireIncrement">   
        	<value>5</value>   
        </property>   
        <property name="acquireRetryAttempts">   
            <value>30</value>   
        </property>   
        <property name="acquireRetryDelay">   
            <value>1000</value>   
        </property>   
        <property name="testConnectionOnCheckin">   
            <value>false</value>   
        </property>  
        <property name="automaticTestTable">   
            <value>t_c3p0</value>   
        </property>   
        <property name="idleConnectionTestPeriod">   
            <value>18000</value>   
        </property>  
        <property name="checkoutTimeout">   
        	<value>5000</value>   
        </property>
	</bean>
     	
	<!-- 注册一个JdbcTemplate实例名称为jdbcTemplate -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<constructor-arg ref="dataSource"/>
	</bean>
	
	<!-- 配置事务异常封装 -->
	<bean id="persistenceExceptionTranslationPostProcessor"  	class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />
	
    
	<!-- 以下为 mybatis配置区 -->    
    
    <!-- 配置mybatis的SqlSessionFactory -->  
    <bean id="mybatisSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
    	<property name="dataSource" ref="dataSource"></property>  
    	<property name="configLocation" value="classpath:mybatis-config.xml"></property>  
    	<!-- 
    	<property name="mapperLocations" value="classpath:com/sinyat/api/weather/mapping/*.xml" />
        <property name="typeAliasesPackage" value="com.sinyat.api.weather.model" />
         -->
        <property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageInterceptor">
                    
                </bean>
            </array>
        </property>
        
    </bean>
    

	<bean id="mybatisSqlSessionTemplateSimple" class="org.mybatis.spring.SqlSessionTemplate">
	  <constructor-arg index="0" ref="mybatisSqlSessionFactory" />
	  <constructor-arg index="1" value="SIMPLE"/>  
	</bean>

	<bean id="mybatisSqlSessionTemplateBatch" class="org.mybatis.spring.SqlSessionTemplate">
	  <constructor-arg index="0" ref="mybatisSqlSessionFactory" />
	  <constructor-arg index="1" value="BATCH"/>  
	</bean>
    
    <!-- 自动映射扫描，代替org.mybatis.spring.MapperFactoryBean -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    	<property name="basePackage" value="com.liming.manager"/>
    	
    	<!-- annotationClass和markerInterface是两个扫描过滤条件 -->
    	<!-- 当指定了annotationClass的时候，MapperScannerConfigurer将只注册使用了annotationClass注解标记的接口 -->
    	<property name="annotationClass" value="org.springframework.stereotype.Repository"/>
    	<!-- markerInterface是用于指定一个接口的，当指定了markerInterface之后，MapperScannerConfigurer将只注册继承自markerInterface的接口。 -->
    	<!--  
    	<property name="markerInterface" value="com.tiantian.mybatis.mapper.SuperMapper"/>  
    	-->
    	
    	
    	<!-- 指定数据访问对象 -->
    	<property name="sqlSessionTemplateBeanName" value="mybatisSqlSessionTemplateBatch" /> 
    	<property name="sqlSessionFactoryBeanName" value="mybatisSqlSessionFactory"/>  
    </bean>
    
    
    <!-- JPA配置区 -->
    <!-- 
    <bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor">
	   <property name="persistenceUnits">
	     <map>
	       <entry key="identity" value="identity"/>
	     </map>
	   </property>
	</bean>
	
	<jee:jndi-lookup id="entityManagerFactory" jndi-name="identity"/>
	 -->
	<!-- JPA实体管理器工厂 spring默认初始化一个名为"default"的persistenceunit-->  
    <bean id="entityManagerFactory"  
        class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">  
        <property name="dataSource" ref="dataSource" />  
        <property name="persistenceProvider" ref="jpaPersistenceProvider"/>
        <property name="jpaVendorAdapter" ref="jpaVendorAdapter"/>   
        <property name="jpaDialect" ref="jpaDialect" />  
        <property name="packagesToScan">
			<list>  
				<value>common.db.base.jpa.*</value>  
				<value>common.db.model.*</value>  
				<value>business.db.model.*</value>  
				<value>*.db.model.*</value>  
			</list>  
		</property>  
  
        <property name="jpaProperties">  
            <props>  
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>  
                <prop key="hibernate.max_fetch_depth">3</prop>  
                <prop key="hibernate.jdbc.fetch_size">18</prop>  
                <prop key="hibernate.jdbc.batch_size">50</prop>  <!-- 设置Hibernate一个提交批次中的最大SQL语句数 -->
                <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>  
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>  
                <prop key="hibernate.format_sql">true</prop>  
                <prop key="javax.persistence.validation.mode">none</prop>  
            </props>  
        </property>  
    </bean>  
    
    <bean id="jpaPersistenceProvider" class="org.hibernate.jpa.HibernatePersistenceProvider" />
      
    <!-- 用于设置JPA实现厂商的特定属性 -->  
    <bean id="jpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
   		<property name="generateDdl" value="false" />
        <property name="database" value="MYSQL" />
        <property name="databasePlatform" value="org.hibernate.dialect.MySQL5InnoDBDialect" />
        <!-- <property name="showSql" value="true" /> -->
    </bean>  
          
    <!-- 用于指定一些高级特性 -->  
    <bean id="jpaDialect" class="org.springframework.orm.jpa.vendor.HibernateJpaDialect" />  
	
	
	<!--2017-07-15 spring-data-jpa的配置项，直接使用jpa的dao，但规则会参考
	http://www.cnblogs.com/dreamroute/p/5173896.html
	<jpa:repositories base-package="your.dao.package" 
		repository-impl-postfix="Impl" 
		entity-manager-factory-ref="entityManagerFactory" 
		transaction-manager-ref="jpaTransactionManager" />
		 -->
</beans>