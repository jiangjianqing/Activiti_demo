<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans     
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx.xsd
	http://www.springframework.org/schema/mvc  
	http://www.springframework.org/schema/mvc/spring-mvc.xsd
	">
	<!-- 重要： 整个系统中只能设置一次 加载资源文件  其中包含变量信息，必须在Spring配置文件的最前面加载，即第一个加载-->
	<context:property-placeholder location="classpath:system.properties" />
	
	<!-- 20170804 重要：DispatcherServlet和ContextLoaderListener的配置文件分开，需要分别加载 -->
	<import resource="classpath*:spring-mvc/spring-*.xml"/>
   
	<!-- 启用spring mvc 注解 -->
	<context:annotation-config />
	<!-- 开启Spring的Bean自动扫描机制来查找与管理Bean实例 -->
	<context:component-scan
		base-package="**.web.**.controller" />
	<!-- 下面的例子使用context:include-filter加快扫描速度 <context:component-scan base-package="com.itxxz.*.web,com.itxxz.sys.*.web,com.jfok.server" 
		use-default-filters="false"> <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" 
		/> </context:component-scan> -->

	<!--20150818 deprecated: 当springMVC-servlet.xml中使用<mvc:annotation-driven 
		/>时，如果是3.1之前已经默认注入AnnotationMethodHandlerAdapter，3.1之后默认注入RequestMappingHandlerAdapter只需加上上面提及的jar包即可! 
		<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" 
		/> -->


	<!-- tiles 配置 ，同时展示了p命名空间的用法，现在可以使用p: 作为<bean> 元素所有属性的前缀来装配Bean 的属性 -->
	<bean id="tilesViewResolver"
		class="org.springframework.web.servlet.view.tiles3.TilesViewResolver"
		p:order="1" />
	<bean id="tilesConfigurer"
		class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<property name="definitions">
			<list>
				<value>/WEB-INF/tiles.xml</value>
				<!-- <value>classpath:layout.xml</value> -->
			</list>
		</property>
	</bean>

	<!-- 加入thymeleaf模板支持 -->
	<bean id="templateResolver"
		class="org.thymeleaf.spring4.templateresolver.SpringResourceTemplateResolver">
		<property name="prefix" value="/WEB-INF/templates/" />
		<property name="suffix" value=".html" />
		<property name="templateMode" value="HTML" />
		<!-- #开发时关闭缓存,不然没法看到实时页面 -->
		<property name="cacheable" value="false" />
	</bean>
	<bean id="templateEngine" class="org.thymeleaf.spring4.SpringTemplateEngine">
		<property name="templateResolver" ref="templateResolver" />
		<property name="additionalDialects">
        <set>
        	<bean class="nz.net.ultraq.thymeleaf.LayoutDialect"/>
          <!-- 20170705:thymeleaf与其他框架集成的地方，例如tiles,但目前还不支持tiles3
          	thymeleaf有layout-dialect,已经可以不需要tiles了
           -->
          <bean class="org.thymeleaf.extras.springsecurity4.dialect.SpringSecurityDialect"/>
        </set>
      </property>
	</bean>
	<bean class="org.thymeleaf.spring4.view.ThymeleafViewResolver">
		<property name="templateEngine" ref="templateEngine" />
		<!--解决中文乱码 -->
		<property name="characterEncoding" value="UTF-8" />
	</bean>

	<!-- 视图解释类 -->  <!-- 对转向页面的路径解析。prefix：前缀， suffix：后缀 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/" />  <!--value="/WEB-INF/jsp/" -->
		<property name="suffix" value=".jsp" /><!--可为空,方便实现自已的依据扩展名来选择视图解释类的逻辑 -->
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
	</bean>

</beans>