<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd" id="WebApp_ID" version="3.1">
	<display-name>Webui_springmvc</display-name>
	<welcome-file-list>
		<welcome-file>index.html</welcome-file>
		<welcome-file>index.htm</welcome-file>
		<welcome-file>index.jsp</welcome-file>
		<welcome-file>default.html</welcome-file>
		<welcome-file>default.htm</welcome-file>
		<welcome-file>default.jsp</welcome-file>
	</welcome-file-list>

	
	<!-- 指定Spring Bean的配置文件所在目录(除servlet配置文件外的内容)。默认配置在WEB-INF目录下 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
        	classpath:spring/spring-*.xml
        </param-value>
	</context-param>
	<!-- 监听器 -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	
	<!-- 指定log4j.properties配置文件的位置 -->
    <context-param>
    	<param-name>log4jConfigLocation</param-name>
    	<param-value>classpath:log4j.properties</param-value>
    </context-param>   
    
	<listener>  
    	<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>  
    </listener>  
    
    <!-- hibernate的 getCurrentSession()事务会自动关闭 
    所以在所有jsp页面查询数据都会关闭session。要想在jsp查询数据库需要加入openSessionInViewFilter
    在使用opensessioninviewFilter时，session的flushMode默认是never的，
		如果想要进行保存，更新等操作，必须要修改session的flushMode 
		1，增加初始化参数（init-param，灵活性不高)
		2，使用声明式事务代理（灵活性很高，推荐）
    -->
    <!--  
    <filter>  
		<filter-name>openSessionInViewFilter</filter-name>  
		<filter-class>org.springframework.orm.hibernate4.support.OpenSessionInViewFilter </filter-class>  
		
		<init-param>  
			<param-name>sessionFactoryBeanName</param-name>  
			<param-value>hibernateSessionFactory</param-value>  
		</init-param>   
		<init-param>  
        	<param-name>flushMode</param-name>  
        	<param-value>AUTO</param-value>  
    	</init-param>  
	</filter> 	 
	<filter-mapping>  
		<filter-name>openSessionInViewFilter</filter-name>  
		<url-pattern>/*</url-pattern>  
	</filter-mapping>
    -->
    
	<!-- springMVC的配置 -->
	<servlet>
		<servlet-name>spring-web</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<!-- 20170712
		 DispatcherServlet加载的是mvc相关的上下文，ContextLoaderListener加载的是spring全局上下文,两者独立配置
		两者关系参考该文 http://jinnianshilongnian.iteye.com/blog/1602617
		定义servlet.xml配置文件的位置和名称，默认为WEB-INF目录下，名称为[<servlet-name>]-servlet.xml，如spring-servlet.xml
		
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>
				classpath:spring/spring-web-servlet.xml
			</param-value>
		</init-param>
		-->
		<load-on-startup>1</load-on-startup>
		<!--spring mvc3.2及以上版本增加了对请求的异步处理，是在servlet3的基础上进行封装。
		这么做的好处避免web server的连接池被长期占用而引起性能问题，调用后生成一个非web的服务线程来处理，增加web服务器的吞吐
		具体参考 http://www.cnblogs.com/yangzhilong/p/3725128.html -->
		<async-supported>true</async-supported>
	</servlet>
	<servlet-mapping>
		<servlet-name>spring-web</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping> 
	
	<!-- spring security -->  
	<listener>
		<!-- 阻止用户重复登陆 -->
    	<listener-class>org.springframework.security.web.session.HttpSessionEventPublisher</listener-class>
  	</listener>
    <filter>    
        <filter-name>springSecurityFilterChain</filter-name>    
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy    
        </filter-class>    
    </filter>    
     
    <filter-mapping>    
        <filter-name>springSecurityFilterChain</filter-name>    
        <url-pattern>/*</url-pattern>    
    </filter-mapping>  	
	
	<!-- 过滤编码方式，防止乱码 -->
	<filter>
		<filter-name>characterEncodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<async-supported>true</async-supported>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>characterEncodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<!-- sesson超时时间 -->  
    <session-config>  
        <session-timeout>180</session-timeout>  
    </session-config>  

<!-- 默认的错误处理页面 -->
	<error-page>
		<error-code>403</error-code>
		<location>/403.html</location>
	</error-page>
	<error-page>
		<error-code>404</error-code>
		<location>/WEB-INF/templates/error-page/404.html</location>
	</error-page>
	<!-- 仅仅在调试的时候注视掉,在正式部署的时候不能注释 -->
	<!-- 这样配置也是可以的，表示发生500错误的时候，转到500.jsp页面处理。 -->
	<error-page> 
		<error-code>500</error-code> 
		<location>/WEB-INF/templates/error-page/500.jsp</location> 
	</error-page> 
	
	<!-- 这样的配置表示如果jsp页面或者servlet发生java.lang.Exception类型（当然包含子类）的异常就会转到500.jsp页面处理。 -->
	<error-page> 
		<exception-type>java.lang.Exception</exception-type> 
		<location>/WEB-INF/templates/error-page/500.jsp</location> 
	</error-page> 
	
	<error-page> 
		<exception-type>java.lang.Throwable</exception-type> 
		<location>/WEB-INF/templates/error-page/500.jsp</location> 
	</error-page>
	<!-- 
	当error-code和exception-type都配置时，exception-type配置的页面优先级高
	及出现500错误，发生异常Exception时会跳转到500.jsp
	 -->	

</web-app>
